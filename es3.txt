#if!defined MATRIX_H
#define MATRIX_H
#include <stdint.h>
struct matrix {
    size_t rows, cols;
    double* data;
};

struct vector {
    size_t n;
    double* data;
};
enum vectorize_by { BY_ROW, BY_COLUMN };
extern struct vector* mat_vectorize(const struct matrix* m, enum vectorize_by dir);

#endif

matrix.c
#include "matrix.h"
struct vector* mat_vectorize(const struct matrix* m, enum vectorize_by dir)
{
	if (m == NULL)return NULL;
	struct vector* v = malloc(sizeof(double)*m->rows*m->cols);
	v->n = m->rows*m->cols;
	double * data= malloc(sizeof(double) * m->rows * m->cols);
	if (v == NULL)return NULL;
	if (dir == BY_ROW) 
	{
		for (size_t r = 0; r < m->rows; ++r)
		{
			for (size_t c = 0; c < m->cols; ++c)
			{
				data[r*m->cols + c] = m->data[r*m->cols+c];
			}
		}
	}
	else
	{
		size_t i = 0;
		{
			for (size_t c = 0; c < m->cols; ++c)
			{
				for (size_t r = 0; r < m->rows; ++r)
				{
					data[i] = m->data[r * m->cols + c];
					++i;
				}
			}
		}

	}
	v->data = data;
	return v;
}